filter(vore != "NA") %>%
ggplot(aes(x = sleep_total, fill = vore))+
geom_density(alpha = 0.5)+
labs(title = "Density of Sleep Totals for Each Vore", x = "Sleep Total", y = "Density")
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot<- renderPlot({
ggplot(data = msleep,
aes_string(x = "vore", y = input$y, fill = "vore"))+
geom_boxplot(pos = "dodge", alpha = 0.6, color = "black")+
theme_light(base_size = 14)+
labs(x = "Diet")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("group",
"Select Grouping Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
ggplot(aes(x = sleep_total, group = input$group))+
geom_density()+
theme_light()+
labs(x = "Sleep Total")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("vore",
"Select Diet Type",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore == "input$vore")
ggplot(aes(x = sleep_total, fill = input$vore))+
geom_density()+
theme_light()+
labs(x = "Sleep Total")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("vore",
"Select Diet Type",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore == "input$vore") %>%
ggplot(aes(x = sleep_total, fill = input$vore))+
geom_density()+
theme_light()+
labs(x = "Sleep Total")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("vore",
"Select Diet Type",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore == "input$vore") %>%
ggplot(aes(x = sleep_total))+
geom_density()+
theme_light()+
labs(x = "Sleep Total")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("vore",
"Select Diet Type",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore == input$vore) %>%
ggplot(aes(x = sleep_total))+
geom_density()+
theme_light()+
labs(x = "Sleep Total")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("vore",
"Select Diet Type",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore == input$vore) %>%
ggplot(aes(x = sleep_total, fill = input$vore))+
geom_density()+
theme_light()+
labs(x = "Sleep Total")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("vore",
"Select Diet Type",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore == input$vore) %>%
ggplot(aes(x = sleep_total, fill = "steelblue"))+
geom_density()+
theme_light()+
labs(x = "Sleep Total")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("vore",
"Select Diet Type",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore == input$vore) %>%
ggplot(aes(x = sleep_total))+
geom_density(color = "black", fill = "steelblue")+
theme_light()+
labs(x = "Sleep Total")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("vore",
"Select Diet Type",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore == input$vore) %>%
ggplot(aes(x = sleep_total))+
geom_density(color = "black", fill = "steelblue", alpha = 0.5)+
theme_light()+
labs(x = "Sleep Total")
})
}
shinyApp(ui, server)
msleep %>%
filter(vore != "NA") %>%
ggplot(aes(x = sleep_total, fill = vore))+
geom_density(alpha = 0.5)+
theme_light+
labs(title = "Density of Sleep Totals for Each Vore", x = "Sleep Total", y = "Density")
msleep %>%
filter(vore != "NA") %>%
ggplot(aes(x = sleep_total, fill = vore))+
geom_density(alpha = 0.5)+
theme_light()+
labs(title = "Density of Sleep Totals for Each Vore", x = "Sleep Total", y = "Density")
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("vore",
"Select Diet Type",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore == input$vore) %>%
ggplot(aes(x = sleep_total))+
geom_density(color = "black", fill = "steelblue", alpha = 0.5)+
theme_light()+
labs(x = "Sleep Total")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("vore",
"Select Diet Type",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore == input$vore & vore != "NA") %>%
ggplot(aes(x = sleep_total))+
geom_density(color = "black", fill = "steelblue", alpha = 0.5)+
theme_light()+
labs(x = "Sleep Total")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("vore",
"Select Diet Type",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore == input$vore) %>%
filter(vore != "NA") %>%
ggplot(aes(x = sleep_total))+
geom_density(color = "black", fill = "steelblue", alpha = 0.5)+
theme_light()+
labs(x = "Sleep Total")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("vore",
"Select Diet Type",
choices = c("carni", "herbi", "insecti", "omni"),
selected = "carni"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore == input$vore) %>%
ggplot(aes(x = sleep_total))+
geom_density(color = "black", fill = "steelblue", alpha = 0.5)+
theme_light()+
labs(x = "Sleep Total")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot<- renderPlot({
ggplot(data = msleep,
aes_string(x = "vore", y = input$y, fill = "vore"))+
geom_boxplot(pos = "dodge", alpha = 0.6, color = "black")+
theme_light(base_size = 14)+
labs(x = "Diet")
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("sf")
library(tidyverse)
library(janitor)
library(gtools)
library(sf)
library(ggmap)
tf <- read.csv("data/landscapegenetics/TF_pipits_2011.csv") %>% clean_names() #16 var
ps <- read.csv("data/landscapegenetics/PS_pipits_2016.csv") %>% clean_names() #15 var
tf_1 <- tf %>% select(!autocov1000m) #redefine tf as a different df
tf_ps <- merge(tf_1,ps, all=TRUE) #merge all data frames together
genomics <- read.csv("data/landscapegenetics/TF_PS_pipits.csv") %>% clean_names()
genomics_tf_ps <- merge(tf_ps, genomics, by = "sample")
options(scipen=999)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(malaria = if_else(malaria == "1", "Y", "N"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(age = if_else(age=="A", "adult", "juvenile")) #I spelled it right this time!
genomics_tf_ps <- genomics_tf_ps %>%
select(!utm)
#genomics_tf_ps <- genomics_tf_ps %>%
#  mutate(tlr4_het = if_else(tlr4_het == 0, "homozygous", "heterozygous"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(across(ends_with("het"), #if the var name ends with "het"
~if_else(.x==0, "homozygous", "heterozygous")))
# Check to see if it ends with 0 (homozygous). Otherwise, heterozygous.
# Should we consider shortening it to "homo" and "hetero"? Might be easier to read.
quartileswater <- quantcut(genomics_tf_ps$distwater)
table(quartileswater)
quartilesurban <- quantcut(genomics_tf_ps$dist_urb)
table(quartilesurban)
quartilesfarm <- quantcut(genomics_tf_ps$distfarm)
table(quartilesfarm)
quartilespoul <- quantcut(genomics_tf_ps$distpoul)
table(quartilespoul)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(distwater_cat = case_when(distwater <= 105 ~ "close",
distwater > 105 & distwater <= 258 ~ "median close",
distwater > 258 & distwater <= 725 ~ "median far",
distwater > 725 ~ "far"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(disturb_cat = case_when(dist_urb <= 45 ~ "close",
dist_urb > 45 & dist_urb <= 108 ~ "median close",
dist_urb > 108 & dist_urb <= 282 ~ "median far",
dist_urb > 282 ~ "far"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(distfarm_cat = case_when(distfarm <= 429 ~ "close",
distfarm > 429 & distfarm <= 723 ~ "median close",
distfarm > 723 & distfarm <= 1240 ~ "median far",
distfarm > 1240 ~ "far"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(distpoul_cat = case_when(distpoul <= 860 ~ "close",
distpoul > 860 & distpoul <= 1830 ~ "median close",
distpoul> 1830 & distpoul <= 3410 ~ "median far",
distpoul > 3410 ~ "far"))
genomics_tf_ps %>%
select(sample, distwater_cat, distfarm_cat, disturb_cat, distpoul_cat)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(across(matches("_[acgt]$|_prot_[1234]$"), ~if_else(.x== 0, "absent", "present")))
tf_ps_latlong <- st_as_sf(tf_ps_geno, coords = c("easting", "northing"), crs = "+proj=utm +zone=28 +datum=WGS84 +units=m +north")
tf_ps_latlong <- st_as_sf(genomics_tf_ps, coords = c("easting", "northing"), crs = "+proj=utm +zone=28 +datum=WGS84 +units=m +north")
tf_ps_latlong <- st_transform(tf_latlong, crs = 4326)
tf_ps_latlong <- st_as_sf(genomics_tf_ps, coords = c("easting", "northing"), crs = "+proj=utm +zone=28 +datum=WGS84 +units=m +north")
tf_ps_latlong <- st_transform(tf_ps_latlong, crs = 4326)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(longitude = st_coordinates(tf_ps_latlong)[,1],
latitude = st_coordinates(tf_ps_latlong)[,2])
genomics_tf_ps
tf_ps_latlong <- st_as_sf(genomics_tf_ps, coords = c("easting", "northing"), crs = "+proj=utm +zone=28 +datum=WGS84 +units=m +north")
tf_ps_latlong <- st_transform(tf_ps_latlong, crs = 4326)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(longitude = st_coordinates(tf_ps_latlong)[,1],
latitude = st_coordinates(tf_ps_latlong)[,2])
genomics_tf_ps %>%
select(sample, latitude, longitude)
tf_ps_latlong <- st_as_sf(genomics_tf_ps, coords = c("easting", "northing"), crs = "+proj=utm +zone=28 +datum=WGS84 +units=m +north")
tf_ps_latlong <- st_transform(tf_ps_latlong, crs = 4326)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(longitude = st_coordinates(tf_ps_latlong)[,1],
latitude = st_coordinates(tf_ps_latlong)[,2])
genomics_tf_ps #%>%
#select(sample, latitude, longitude)
tf_ps_latlong <- st_as_sf(genomics_tf_ps, coords = c("easting", "northing"), crs = "+proj=utm +zone=28 +datum=WGS84 +units=m +north")
tf_ps_latlong <- st_transform(tf_ps_latlong, crs = 4326)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(longitude = st_coordinates(tf_ps_latlong)[,1],
latitude = st_coordinates(tf_ps_latlong)[,2])
genomics_tf_ps %>%
select(sample, latitude, longitude)
genomics_tf_ps %>%
filter(island == "TF")
select(latitude, longitude) %>%
summary()
genomics_tf_ps %>%
filter(island == "TF") %>%
select(latitude, longitude) %>%
summary()
genomics_tf_ps %>%
filter(island == "PS") %>%
select(latitude, longitude) %>%
summary()
latitude <- c(33.03, 33.10)
longitude <- c(-16.39, -16.3)
ps_bbox <- make_bbox(longitude, latitude, f = 0.05)
ps_map <- get_stadiamap(ps_bbox, maptype = "stamen_terrain", zoom=15)
latitude <- c(33.03, 33.10)
longitude <- c(-16.39, -16.3)
ps_bbox <- make_bbox(longitude, latitude, f = 0.05)
ps_map <- get_stadiamap(ps_bbox, maptype = "stamen_terrain", zoom=12)
ggmap(ps_map)+
geom_point(data = ps, aes(longitude, latitude), size=1) +
labs(x= "Longitude", y= "Latitude", title = "Bird Locations of Porto Santo")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("sf")
library(tidyverse)
library(janitor)
library(gtools)
library(sf)
library(ggmap)
register_stadiamaps("1d92513d-1a7f-407d-8c65-60d0d510c9c0", write = FALSE)
tf <- read.csv("data/landscapegenetics/TF_pipits_2011.csv") %>% clean_names() #16 var
ps <- read.csv("data/landscapegenetics/PS_pipits_2016.csv") %>% clean_names() #15 var
tf_1 <- tf %>% select(!autocov1000m) #redefine tf as a different df
tf_ps <- merge(tf_1,ps, all=TRUE) #merge all data frames together
genomics <- read.csv("data/landscapegenetics/TF_PS_pipits.csv") %>% clean_names()
genomics_tf_ps <- merge(tf_ps, genomics, by = "sample")
options(scipen=999)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(malaria = if_else(malaria == "1", "Y", "N"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(age = if_else(age=="A", "adult", "juvenile")) #I spelled it right this time!
genomics_tf_ps <- genomics_tf_ps %>%
select(!utm)
#genomics_tf_ps <- genomics_tf_ps %>%
#  mutate(tlr4_het = if_else(tlr4_het == 0, "homozygous", "heterozygous"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(across(ends_with("het"), #if the var name ends with "het"
~if_else(.x==0, "homozygous", "heterozygous")))
# Check to see if it ends with 0 (homozygous). Otherwise, heterozygous.
# Should we consider shortening it to "homo" and "hetero"? Might be easier to read.
quartileswater <- quantcut(genomics_tf_ps$distwater)
table(quartileswater)
quartilesurban <- quantcut(genomics_tf_ps$dist_urb)
table(quartilesurban)
quartilesfarm <- quantcut(genomics_tf_ps$distfarm)
table(quartilesfarm)
quartilespoul <- quantcut(genomics_tf_ps$distpoul)
table(quartilespoul)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(distwater_cat = case_when(distwater <= 105 ~ "close",
distwater > 105 & distwater <= 258 ~ "median close",
distwater > 258 & distwater <= 725 ~ "median far",
distwater > 725 ~ "far"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(disturb_cat = case_when(dist_urb <= 45 ~ "close",
dist_urb > 45 & dist_urb <= 108 ~ "median close",
dist_urb > 108 & dist_urb <= 282 ~ "median far",
dist_urb > 282 ~ "far"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(distfarm_cat = case_when(distfarm <= 429 ~ "close",
distfarm > 429 & distfarm <= 723 ~ "median close",
distfarm > 723 & distfarm <= 1240 ~ "median far",
distfarm > 1240 ~ "far"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(distpoul_cat = case_when(distpoul <= 860 ~ "close",
distpoul > 860 & distpoul <= 1830 ~ "median close",
distpoul> 1830 & distpoul <= 3410 ~ "median far",
distpoul > 3410 ~ "far"))
genomics_tf_ps %>%
select(sample, distwater_cat, distfarm_cat, disturb_cat, distpoul_cat)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(across(matches("_[acgt]$|_prot_[1234]$"), ~if_else(.x== 0, "absent", "present")))
tf_ps_latlong <- st_as_sf(genomics_tf_ps, coords = c("easting", "northing"), crs = "+proj=utm +zone=28 +datum=WGS84 +units=m +north")
tf_ps_latlong <- st_transform(tf_ps_latlong, crs = 4326)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(longitude = st_coordinates(tf_ps_latlong)[,1],
latitude = st_coordinates(tf_ps_latlong)[,2])
genomics_tf_ps %>%
select(sample, latitude, longitude)
genomics_tf_ps %>%
filter(island == "TF") %>%
select(latitude, longitude) %>%
summary()
latitude <- c(28.01, 28.58)
longitude <- c(-16.92, -16.18)
tf_bbox <- make_bbox(longitude, latitude, f = 0.05)
tf_map <- get_stadiamap(tf_bbox, maptype = "stamen_terrain", zoom=12)
ggmap(tf_map)+
geom_point(data = tf, aes(longitude, latitude), size=1) +
labs(x= "Longitude", y= "Latitude", title = "Bird Locations of Tenerife")
ggmap(tf_map)+
geom_point(data = genomics_tf_ps, aes(longitude, latitude), size=1) +
labs(x= "Longitude", y= "Latitude", title = "Bird Locations of Tenerife")
latitude <- c(33.03, 33.10)
longitude <- c(-16.39, -16.3)
ps_bbox <- make_bbox(longitude, latitude, f = 0.05)
ps_map <- get_stadiamap(ps_bbox, maptype = "stamen_terrain", zoom=12)
ggmap(ps_map)+
geom_point(data = genomics_tf_ps, aes(longitude, latitude), size=1) +
labs(x= "Longitude", y= "Latitude", title = "Bird Locations of Porto Santo")
genomics_tf_ps %>%
filter(island == "TF") %>%
select(latitude, longitude) %>%
summary()
ggmap(ps_map)+
geom_point(data = genomics_tf_ps, aes(longitude, latitude, color = malaria), size=1) +
labs(x= "Longitude", y= "Latitude", title = "Bird Locations of Porto Santo")
ggmap(tf_map)+
geom_point(data = genomics_tf_ps, aes(longitude, latitude, color = malaria), size=1) +
labs(x= "Longitude", y= "Latitude", title = "Bird Locations of Tenerife")
write.csv(genomics_tf_ps, "data/landscapegenetics/genomics_tf_ps.csv", row.names = FALSE)
library(ggmap)
source("C:/Users/wilja/OneDrive/Desktop/shinyapp.R", echo=TRUE)
