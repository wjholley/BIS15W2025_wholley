ggplot(aes(x = sleep_total))+
geom_density(color = "black", fill = "steelblue", alpha = 0.5)+
theme_light()+
labs(x = "Sleep Total")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("vore",
"Select Diet Type",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore == input$vore & vore != "NA") %>%
ggplot(aes(x = sleep_total))+
geom_density(color = "black", fill = "steelblue", alpha = 0.5)+
theme_light()+
labs(x = "Sleep Total")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("vore",
"Select Diet Type",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore == input$vore) %>%
filter(vore != "NA") %>%
ggplot(aes(x = sleep_total))+
geom_density(color = "black", fill = "steelblue", alpha = 0.5)+
theme_light()+
labs(x = "Sleep Total")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("vore",
"Select Diet Type",
choices = c("carni", "herbi", "insecti", "omni"),
selected = "carni"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore == input$vore) %>%
ggplot(aes(x = sleep_total))+
geom_density(color = "black", fill = "steelblue", alpha = 0.5)+
theme_light()+
labs(x = "Sleep Total")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleep Related Stats by Diet"),
radioButtons("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot<- renderPlot({
ggplot(data = msleep,
aes_string(x = "vore", y = input$y, fill = "vore"))+
geom_boxplot(pos = "dodge", alpha = 0.6, color = "black")+
theme_light(base_size = 14)+
labs(x = "Diet")
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("sf")
library(tidyverse)
library(janitor)
library(gtools)
library(sf)
library(ggmap)
tf <- read.csv("data/landscapegenetics/TF_pipits_2011.csv") %>% clean_names() #16 var
ps <- read.csv("data/landscapegenetics/PS_pipits_2016.csv") %>% clean_names() #15 var
tf_1 <- tf %>% select(!autocov1000m) #redefine tf as a different df
tf_ps <- merge(tf_1,ps, all=TRUE) #merge all data frames together
genomics <- read.csv("data/landscapegenetics/TF_PS_pipits.csv") %>% clean_names()
genomics_tf_ps <- merge(tf_ps, genomics, by = "sample")
options(scipen=999)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(malaria = if_else(malaria == "1", "Y", "N"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(age = if_else(age=="A", "adult", "juvenile")) #I spelled it right this time!
genomics_tf_ps <- genomics_tf_ps %>%
select(!utm)
#genomics_tf_ps <- genomics_tf_ps %>%
#  mutate(tlr4_het = if_else(tlr4_het == 0, "homozygous", "heterozygous"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(across(ends_with("het"), #if the var name ends with "het"
~if_else(.x==0, "homozygous", "heterozygous")))
# Check to see if it ends with 0 (homozygous). Otherwise, heterozygous.
# Should we consider shortening it to "homo" and "hetero"? Might be easier to read.
quartileswater <- quantcut(genomics_tf_ps$distwater)
table(quartileswater)
quartilesurban <- quantcut(genomics_tf_ps$dist_urb)
table(quartilesurban)
quartilesfarm <- quantcut(genomics_tf_ps$distfarm)
table(quartilesfarm)
quartilespoul <- quantcut(genomics_tf_ps$distpoul)
table(quartilespoul)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(distwater_cat = case_when(distwater <= 105 ~ "close",
distwater > 105 & distwater <= 258 ~ "median close",
distwater > 258 & distwater <= 725 ~ "median far",
distwater > 725 ~ "far"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(disturb_cat = case_when(dist_urb <= 45 ~ "close",
dist_urb > 45 & dist_urb <= 108 ~ "median close",
dist_urb > 108 & dist_urb <= 282 ~ "median far",
dist_urb > 282 ~ "far"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(distfarm_cat = case_when(distfarm <= 429 ~ "close",
distfarm > 429 & distfarm <= 723 ~ "median close",
distfarm > 723 & distfarm <= 1240 ~ "median far",
distfarm > 1240 ~ "far"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(distpoul_cat = case_when(distpoul <= 860 ~ "close",
distpoul > 860 & distpoul <= 1830 ~ "median close",
distpoul> 1830 & distpoul <= 3410 ~ "median far",
distpoul > 3410 ~ "far"))
genomics_tf_ps %>%
select(sample, distwater_cat, distfarm_cat, disturb_cat, distpoul_cat)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(across(matches("_[acgt]$|_prot_[1234]$"), ~if_else(.x== 0, "absent", "present")))
tf_ps_latlong <- st_as_sf(tf_ps_geno, coords = c("easting", "northing"), crs = "+proj=utm +zone=28 +datum=WGS84 +units=m +north")
tf_ps_latlong <- st_as_sf(genomics_tf_ps, coords = c("easting", "northing"), crs = "+proj=utm +zone=28 +datum=WGS84 +units=m +north")
tf_ps_latlong <- st_transform(tf_latlong, crs = 4326)
tf_ps_latlong <- st_as_sf(genomics_tf_ps, coords = c("easting", "northing"), crs = "+proj=utm +zone=28 +datum=WGS84 +units=m +north")
tf_ps_latlong <- st_transform(tf_ps_latlong, crs = 4326)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(longitude = st_coordinates(tf_ps_latlong)[,1],
latitude = st_coordinates(tf_ps_latlong)[,2])
genomics_tf_ps
tf_ps_latlong <- st_as_sf(genomics_tf_ps, coords = c("easting", "northing"), crs = "+proj=utm +zone=28 +datum=WGS84 +units=m +north")
tf_ps_latlong <- st_transform(tf_ps_latlong, crs = 4326)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(longitude = st_coordinates(tf_ps_latlong)[,1],
latitude = st_coordinates(tf_ps_latlong)[,2])
genomics_tf_ps %>%
select(sample, latitude, longitude)
tf_ps_latlong <- st_as_sf(genomics_tf_ps, coords = c("easting", "northing"), crs = "+proj=utm +zone=28 +datum=WGS84 +units=m +north")
tf_ps_latlong <- st_transform(tf_ps_latlong, crs = 4326)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(longitude = st_coordinates(tf_ps_latlong)[,1],
latitude = st_coordinates(tf_ps_latlong)[,2])
genomics_tf_ps #%>%
#select(sample, latitude, longitude)
tf_ps_latlong <- st_as_sf(genomics_tf_ps, coords = c("easting", "northing"), crs = "+proj=utm +zone=28 +datum=WGS84 +units=m +north")
tf_ps_latlong <- st_transform(tf_ps_latlong, crs = 4326)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(longitude = st_coordinates(tf_ps_latlong)[,1],
latitude = st_coordinates(tf_ps_latlong)[,2])
genomics_tf_ps %>%
select(sample, latitude, longitude)
genomics_tf_ps %>%
filter(island == "TF")
select(latitude, longitude) %>%
summary()
genomics_tf_ps %>%
filter(island == "TF") %>%
select(latitude, longitude) %>%
summary()
genomics_tf_ps %>%
filter(island == "PS") %>%
select(latitude, longitude) %>%
summary()
latitude <- c(33.03, 33.10)
longitude <- c(-16.39, -16.3)
ps_bbox <- make_bbox(longitude, latitude, f = 0.05)
ps_map <- get_stadiamap(ps_bbox, maptype = "stamen_terrain", zoom=15)
latitude <- c(33.03, 33.10)
longitude <- c(-16.39, -16.3)
ps_bbox <- make_bbox(longitude, latitude, f = 0.05)
ps_map <- get_stadiamap(ps_bbox, maptype = "stamen_terrain", zoom=12)
ggmap(ps_map)+
geom_point(data = ps, aes(longitude, latitude), size=1) +
labs(x= "Longitude", y= "Latitude", title = "Bird Locations of Porto Santo")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("sf")
library(tidyverse)
library(janitor)
library(gtools)
library(sf)
library(ggmap)
register_stadiamaps("1d92513d-1a7f-407d-8c65-60d0d510c9c0", write = FALSE)
tf <- read.csv("data/landscapegenetics/TF_pipits_2011.csv") %>% clean_names() #16 var
ps <- read.csv("data/landscapegenetics/PS_pipits_2016.csv") %>% clean_names() #15 var
tf_1 <- tf %>% select(!autocov1000m) #redefine tf as a different df
tf_ps <- merge(tf_1,ps, all=TRUE) #merge all data frames together
genomics <- read.csv("data/landscapegenetics/TF_PS_pipits.csv") %>% clean_names()
genomics_tf_ps <- merge(tf_ps, genomics, by = "sample")
options(scipen=999)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(malaria = if_else(malaria == "1", "Y", "N"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(age = if_else(age=="A", "adult", "juvenile")) #I spelled it right this time!
genomics_tf_ps <- genomics_tf_ps %>%
select(!utm)
#genomics_tf_ps <- genomics_tf_ps %>%
#  mutate(tlr4_het = if_else(tlr4_het == 0, "homozygous", "heterozygous"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(across(ends_with("het"), #if the var name ends with "het"
~if_else(.x==0, "homozygous", "heterozygous")))
# Check to see if it ends with 0 (homozygous). Otherwise, heterozygous.
# Should we consider shortening it to "homo" and "hetero"? Might be easier to read.
quartileswater <- quantcut(genomics_tf_ps$distwater)
table(quartileswater)
quartilesurban <- quantcut(genomics_tf_ps$dist_urb)
table(quartilesurban)
quartilesfarm <- quantcut(genomics_tf_ps$distfarm)
table(quartilesfarm)
quartilespoul <- quantcut(genomics_tf_ps$distpoul)
table(quartilespoul)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(distwater_cat = case_when(distwater <= 105 ~ "close",
distwater > 105 & distwater <= 258 ~ "median close",
distwater > 258 & distwater <= 725 ~ "median far",
distwater > 725 ~ "far"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(disturb_cat = case_when(dist_urb <= 45 ~ "close",
dist_urb > 45 & dist_urb <= 108 ~ "median close",
dist_urb > 108 & dist_urb <= 282 ~ "median far",
dist_urb > 282 ~ "far"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(distfarm_cat = case_when(distfarm <= 429 ~ "close",
distfarm > 429 & distfarm <= 723 ~ "median close",
distfarm > 723 & distfarm <= 1240 ~ "median far",
distfarm > 1240 ~ "far"))
genomics_tf_ps <- genomics_tf_ps %>%
mutate(distpoul_cat = case_when(distpoul <= 860 ~ "close",
distpoul > 860 & distpoul <= 1830 ~ "median close",
distpoul> 1830 & distpoul <= 3410 ~ "median far",
distpoul > 3410 ~ "far"))
genomics_tf_ps %>%
select(sample, distwater_cat, distfarm_cat, disturb_cat, distpoul_cat)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(across(matches("_[acgt]$|_prot_[1234]$"), ~if_else(.x== 0, "absent", "present")))
tf_ps_latlong <- st_as_sf(genomics_tf_ps, coords = c("easting", "northing"), crs = "+proj=utm +zone=28 +datum=WGS84 +units=m +north")
tf_ps_latlong <- st_transform(tf_ps_latlong, crs = 4326)
genomics_tf_ps <- genomics_tf_ps %>%
mutate(longitude = st_coordinates(tf_ps_latlong)[,1],
latitude = st_coordinates(tf_ps_latlong)[,2])
genomics_tf_ps %>%
select(sample, latitude, longitude)
genomics_tf_ps %>%
filter(island == "TF") %>%
select(latitude, longitude) %>%
summary()
latitude <- c(28.01, 28.58)
longitude <- c(-16.92, -16.18)
tf_bbox <- make_bbox(longitude, latitude, f = 0.05)
tf_map <- get_stadiamap(tf_bbox, maptype = "stamen_terrain", zoom=12)
ggmap(tf_map)+
geom_point(data = tf, aes(longitude, latitude), size=1) +
labs(x= "Longitude", y= "Latitude", title = "Bird Locations of Tenerife")
ggmap(tf_map)+
geom_point(data = genomics_tf_ps, aes(longitude, latitude), size=1) +
labs(x= "Longitude", y= "Latitude", title = "Bird Locations of Tenerife")
latitude <- c(33.03, 33.10)
longitude <- c(-16.39, -16.3)
ps_bbox <- make_bbox(longitude, latitude, f = 0.05)
ps_map <- get_stadiamap(ps_bbox, maptype = "stamen_terrain", zoom=12)
ggmap(ps_map)+
geom_point(data = genomics_tf_ps, aes(longitude, latitude), size=1) +
labs(x= "Longitude", y= "Latitude", title = "Bird Locations of Porto Santo")
genomics_tf_ps %>%
filter(island == "TF") %>%
select(latitude, longitude) %>%
summary()
ggmap(ps_map)+
geom_point(data = genomics_tf_ps, aes(longitude, latitude, color = malaria), size=1) +
labs(x= "Longitude", y= "Latitude", title = "Bird Locations of Porto Santo")
ggmap(tf_map)+
geom_point(data = genomics_tf_ps, aes(longitude, latitude, color = malaria), size=1) +
labs(x= "Longitude", y= "Latitude", title = "Bird Locations of Tenerife")
write.csv(genomics_tf_ps, "data/landscapegenetics/genomics_tf_ps.csv", row.names = FALSE)
library(ggmap)
source("C:/Users/wilja/OneDrive/Desktop/shinyapp.R", echo=TRUE)
library(tidyverse)
library(janitor)
msleep <- msleep
clean_names(msleep)
#dataexample <- read_csv("/data/dataexample.csv")
glimpse(msleep)
summary(msleep)
msleep %>%
select(name, vore) #only displays the name and vore columns
msleep %>%
filter(vore == "carni") #filters all carnivores
msleep %>%
filter(vore != "carni") #filters out all carnivores
msleep %>%
filter(vore == "carni" | vore == "herbi") #filters all carnivores and herbivores
msleep %>%
filter(between(sleep_total, 10, 12)) #filters all animals that sleep between 10 and 12 hours total each day.
msleep %>%
count(vore)
msleep %>%
tabyl(vore)
msleep %>%
summarize(n_vore = n_distinct(vore, na.rm = T)) #tells us how many distinct entries there are for the vore column while also    excluding NAs
msleep %>%
group_by(vore) %>%
summarize(average_sleep_vore = mean(sleep_total, na.rm = T), n = n()) #this groups by vore and then calculates the mean sleep total and puts it into a new column called average_sleep_vore. It also displays the total n for each category using n = n().
msleep %>%
group_by(vore, conservation) %>%
summarize(average_bodywt_vore_conservation = mean(bodywt, na.rm = T), n = n())
msleep %>%
select(name, sleep_total) %>%
mutate(sleep_total_min = sleep_total * 60) #creates a new variable called sleep_total_min that converts sleep_total from hours   to minutes.
msleep %>%
select(name, sleep_total) %>%
mutate(sleep_designation = ifelse(10 < sleep_total, "lazy bum", "productive member of society"))
msleep %>%
arrange(-sleep_total) #arranges in descending order for sleep_total
msleep %>%
summarize(mean_sleep_total = mean(sleep_total, na.rm = T),
mean_body_wt = mean(bodywt, na.rm = T),
mean_brain_wt = mean(brainwt, na.rm = T), n = n()) #this is a lot
msleep %>%
summarize(across(c(sleep_total, bodywt, brainwt), \(x) mean(x, na.rm = T)))
msleep %>%
summarize(across(where(is.numeric), \(x) mean(x, na.rm = T))) #this calculates the mean of all numerics.
msleep %>%
summarize(across(contains("wt"), \(x) mean(x, na.rm = T))) #this calculates the mean of all variables that contain "wt" in them.
msleep %>%
summarize(across(contains("wt"), list(mean=\(x) mean(x, na.rm = T), sd=\(x) sd(x, na.rm = T)))) #gives us both the mean and standard deviation of variables containing "wt"
#install.packages("naniar")
library("tidyverse")
library("naniar")
library("janitor")
life_history <- read_csv("data/mammal_lifehistories_v3.csv") %>%
clean_names()
summary(life_history)
life_history %>%
summarize(across(everything(), ~ sum(is.na(.))))
life_history_no_nas <- read_csv("data/mammal_lifehistories_v3.csv", na = c("NA", "-999", " ", ".")) %>%
clean_names()
life_history_no_nas %>%
summarize(across(everything(), ~ sum(is.na(.))))
miss_var_summary(life_history_no_nas)
hist(life_history_no_nas$max_life) #we found another way that NA's are represented
life_history_no_nas %>%
filter(max_life==0) %>%
select(order, family, genus, species, max_life)
life_history_no_nas <- life_history_no_nas %>%
mutate(max_life=na_if(max_life, 0))
life_history_no_nas %>%
group_by(order) %>%
miss_var_summary(order=T)
life_history %>% #going back to the original data
replace_with_na(replace = list(newborn = "not measured",
weaning= -999,
wean_mass= -999,
afr= -999,
max_life= 0,
litter_size= -999,
gestation= -999,
mass= -999)) %>%
miss_var_summary()
life_history %>% #going back to the original data
replace_with_na_all(condition = ~.x == -999)%>%
miss_var_summary()
common_na_strings
common_na_numbers
life_history %>% #going back to the original data
replace_with_na_all(condition = ~.x %in% c(common_na_strings, common_na_numbers)) %>%
mutate(newborn=na_if(newborn, "not measured"))
cites <- read_csv("data/cites.csv") %>%
clean_names()
cites %>%
miss_var_summary()
cites %>%
select(class, exporter_reported_quantity) %>%
group_by(class) %>%
miss_var_summary() %>%
arrange(-n_miss)
read_csv(file = "data/mammal_lifehistories_v3.csv", na = c("NA", " ", ".", "-999", "not measured")) %>% clean_names()
lifehistories <- read_csv("mammal_lifehistories_v3.csv")
lifehistories %>%
summarize(across(everything(), ~ sum(is.na(.))))
lifehistories %>%
summarize(across(everything(), ~ sum(is.na(.))))
summary(lifehistories)
library(tidyverse)
library(janitor)
library(naniar)
msleep <- msleep
clean_names(msleep)
common_na_numbers
common_na_strings
life_history %>% #going back to the original data
replace_with_na_all(condition = ~.x %in% c(common_na_strings, common_na_numbers)) %>%
mutate(newborn=na_if(newborn, "not measured"))
lifehistories <- lifehistories %>% #going back to the original data
replace_with_na_all(condition = ~.x %in% c(common_na_strings, common_na_numbers)) %>%
mutate(newborn=na_if(newborn, "not measured"))
miss_var_summary(lifehistories)
heartrate <- read_csv("data/heartrate.csv")
heartrate <- read_csv("heartrate.csv")
heartrate <- read_csv("heartrate.csv")
heartrate
heartrate %>%
pivot_longer(-patient,
names_to = "drug",
values_to = "heartrate")
heartrate_long <- heartrate %>%
pivot_longer(-patient, #leaves out the patient column
names_to = "drug", #puts drugs a, b, c, and d into a column called "drug"
values_to = "heartrate") #puts the values in
heartrate_long
heartrate_long %>%
pivot_wider(names_from = "drug",
values_from = "heartrate")
qpcr_untidy <- read_csv("qpcr_untidy.csv")
qpcr_untidy <- read_csv("qpcr_untidy.csv")
qpcr
qpcr_untidy <- read_csv("qpcr_untidy.csv")
qpcr_untidy
qpcr_long <- qpcr_untidy %>%
pivot_longer(-gene,
names_to = c("experiment", "replicate"),
names_sep = "_"
values_to = "mRNA_expression")
qpcr_long <- qpcr_untidy %>%
pivot_longer(-gene,
names_to = c("experiment", "replicate"),
names_sep = "_",
values_to = "mRNA_expression")
qpcr_long <- qpcr_untidy %>%
pivot_longer(-gene,
names_to = c("experiment", "replicate"),
names_sep = "_",
values_to = "mRNA_expression")
qpcr_long
library("tidyverse")
datasets::USPersonalExpenditure
?USPersonalExpenditure
expenditures <- USPersonalExpenditure %>%
as_tibble() %>% #this transforms the matrix into a data frame
mutate(expenditure = rownames(USPersonalExpenditure))
expenditures
tidy_expenditures <- expenditures %>%
pivot_longer(-expenditure,
names_to = "year",
values_to = "spending")
tidy_expenditures
tidy_expenditures %>%
filter(expenditure == "Medical and Health") %>%
arrange(-spending)
heartrate2 <- read_csv("data/heartrate2.csv")
heartrate2
heartrate2 %>%
separate(patient, into= c("patient", "sex"), sep = "_")
heartrate2 %>%
separate(patient, into= c("patient", "sex"), sep = -1) %>%
pivot_longer(-c(patient, sex),
names_to = "drug",
values_to = "heartrate")
heartrate2 %>%
separate(patient, into= c("patient", "sex"), sep = -1) %>%
mutate(patient=str_remove(patient, "_"))
heartrate3 <- heartrate2 %>%
separate(patient, into = c("patient", "sex"), sep = "_") %>%
pivot_longer(-c(patient, sex),
names_to = "drug",
values_to = "heartrate")
heartrate3 %>%
arrange(patient, drug)
heartrate3 %>%
unite(patient, c(patient, sex), sep = "_")
tb_data <- read_csv("data/tb_data.csv")
tb_data
tb_data %>%
pivot_wider(names_from = "key", #the observations under key will become new columns
values_from = "value") #the values under value will be moved to the new columns
gene_exp <- read_csv("data/gene_exp.csv") %>%
pivot_wider(names_from = "type",
values_from = "L4_values")
gene_exp
beachbugs <- read_csv("data/beachbugs_long.csv")
beachbugs
beachbugs_wide <- beachbugs %>%
pivot_wider(names_from = "site",
values_from = "buglevels")
beachbugs_wide
beachbugs_long <- beachbugs_wide %>%
pivot_longer(-year,
names_to = "site",
values_to = "buglevels")
beachbugs_long %>%
arrange(-buglevels)
library(shiny); runApp('C:/Users/wilja/OneDrive/Desktop/BIS15W2025_group6/final project/shinyapp.R')
runApp('C:/Users/wilja/OneDrive/Desktop/BIS15W2025_group6/final project/shinyapp.R')
